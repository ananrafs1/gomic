// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: orchestrator/proto/scrapper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScrapperClient is the client API for Scrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapperClient interface {
	Scrap(ctx context.Context, in *ScrapRequest, opts ...grpc.CallOption) (*ScrapResponse, error)
	ScrapPerChapter(ctx context.Context, in *ScrapPerChapterRequest, opts ...grpc.CallOption) (*ScrapPerChapterResponse, error)
}

type scrapperClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapperClient(cc grpc.ClientConnInterface) ScrapperClient {
	return &scrapperClient{cc}
}

func (c *scrapperClient) Scrap(ctx context.Context, in *ScrapRequest, opts ...grpc.CallOption) (*ScrapResponse, error) {
	out := new(ScrapResponse)
	err := c.cc.Invoke(ctx, "/proto.Scrapper/Scrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapperClient) ScrapPerChapter(ctx context.Context, in *ScrapPerChapterRequest, opts ...grpc.CallOption) (*ScrapPerChapterResponse, error) {
	out := new(ScrapPerChapterResponse)
	err := c.cc.Invoke(ctx, "/proto.Scrapper/ScrapPerChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapperServer is the server API for Scrapper service.
// All implementations should embed UnimplementedScrapperServer
// for forward compatibility
type ScrapperServer interface {
	Scrap(context.Context, *ScrapRequest) (*ScrapResponse, error)
	ScrapPerChapter(context.Context, *ScrapPerChapterRequest) (*ScrapPerChapterResponse, error)
}

// UnimplementedScrapperServer should be embedded to have forward compatible implementations.
type UnimplementedScrapperServer struct {
}

func (UnimplementedScrapperServer) Scrap(context.Context, *ScrapRequest) (*ScrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrap not implemented")
}
func (UnimplementedScrapperServer) ScrapPerChapter(context.Context, *ScrapPerChapterRequest) (*ScrapPerChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScrapPerChapter not implemented")
}

// UnsafeScrapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapperServer will
// result in compilation errors.
type UnsafeScrapperServer interface {
	mustEmbedUnimplementedScrapperServer()
}

func RegisterScrapperServer(s grpc.ServiceRegistrar, srv ScrapperServer) {
	s.RegisterService(&Scrapper_ServiceDesc, srv)
}

func _Scrapper_Scrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapperServer).Scrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scrapper/Scrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapperServer).Scrap(ctx, req.(*ScrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrapper_ScrapPerChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapPerChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapperServer).ScrapPerChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scrapper/ScrapPerChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapperServer).ScrapPerChapter(ctx, req.(*ScrapPerChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scrapper_ServiceDesc is the grpc.ServiceDesc for Scrapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scrapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scrapper",
	HandlerType: (*ScrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrap",
			Handler:    _Scrapper_Scrap_Handler,
		},
		{
			MethodName: "ScrapPerChapter",
			Handler:    _Scrapper_ScrapPerChapter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestrator/proto/scrapper.proto",
}
